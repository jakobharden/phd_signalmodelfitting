## Generate synthetic sinusoidal signal#### Usage: [r_ss, r_nn, r_ns] = tool_gen_signal(p_fs, p_nc, p_sp)#### p_fs ... sampling frequency, optional, default = 1e7, Hz, <uint>## p_nc ... number of cycles, optional, default = 3 cycles, <uint>## p_sp ... signal model parameter array, optional, default = [A=1, F1=5000, alpha=2, beta=0.75, gamma=5], [<dbl>]## r_ss ... return: signal amplitude array, [<dbl>]## r_nn ... return: signal sample index array, [<dbl>]## r_ns ... return: number of samples, <uint>#### Signal model parameter array:##   p_sp = [A, F1, alpha, beta, gamma]##     A     ... amplitude scaling factor##     F1    ... primary frequency (first sinusoidal part), sin(2*pi/N*n)##     alpha ... frequency ratio (second sinusoidal part), 1/alpha * sin(2*pi/N*alpha*n)##     beta  ... decay factor (first exponential part), exp(-df1*n/N)##     gamma ... sway-in factor (second exponential part), (1 - exp(-df2*n/N))########################################################################################################################### LICENSE####    Copyright (C) 2025 Jakob Harden (jakob.harden@tugraz.at, Graz University of Technology, Graz, Austria)##    This file is part of the PhD thesis of Jakob Harden.####    This program is free software: you can redistribute it and/or modify##    it under the terms of the GNU Affero General Public License as##    published by the Free Software Foundation, either version 3 of the##    License, or (at your option) any later version.####    This program is distributed in the hope that it will be useful,##    but WITHOUT ANY WARRANTY; without even the implied warranty of##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the##    GNU Affero General Public License for more details.####    You should have received a copy of the GNU Affero General Public License##    along with this program.  If not, see <https://www.gnu.org/licenses/>.###########################################################################################################################function [r_ss, r_nn, r_ns] = tool_gen_signal(p_fs = 1e7, p_nc = 3, p_sp = [1, 5000, 2, 0.75, 5])    ## number of samples  r_ns = floor(p_nc * p_fs / p_sp(2));    ## sample index array  r_nn = 1 : r_ns;    ## base signal function argument  ww0 = linspace(0, 1, r_ns);    ## first sinusoidal part, argument  ww1 = ww0 * p_nc * 2 * pi;    ## second sinusoidal part, argument  ww2 = ww1 * p_sp(3);    ## decay function, argument  ww3 = -ww0 * p_sp(4) * p_nc;    ## sway-in function, argument  ww4 = -ww0 * p_sp(5) * p_nc;    ## generate signal function  r_ss = (sin(ww1) .- sin(ww2) / p_sp(3)) .* exp(ww3) .* (1 - exp(ww4));    ## normalize signal function  r_ss = r_ss / max(r_ss);    ## scale signal function  r_ss = r_ss * p_sp(1);  ##  ## plot signal##  figure();##  hold on;##  plot(r_nn, r_ss, '-k;signal;');##  hold off;##  xlabel('sample index [1]');##  ylabel('amplitude [1]');##  title(sprintf('%s', 'tool\_gen\_signal'));  endfunction